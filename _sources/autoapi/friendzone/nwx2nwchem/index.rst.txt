:py:mod:`friendzone.nwx2nwchem`
===============================

.. py:module:: friendzone.nwx2nwchem


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   friendzone.nwx2nwchem.NWChemViaMolSSI



Functions
~~~~~~~~~

.. autoapisummary::

   friendzone.nwx2nwchem.call_qcengine
   friendzone.nwx2nwchem.load_nwchem_modules



.. py:function:: call_qcengine(pt, mol, program, **kwargs)

   Wraps calling a program through the QCEngine API.

   .. note::

      QCEngine only supports high-level modularity (modularity roughly at
      the granularity of a call to an electronic structure package). We
      thus have assumed that the molecular system will always be an input
      to whatever QCEngine call we are running.

   This function is the main API for calling QCEngine from NWChemEx. The
   idea is to more or less feed the inputs from a ``run_as`` call directly
   into this function and then have this function convert the NWChemEx
   objects to their QCElemental equivalents. Right now those mappings
   include:

   - property_type -> driver type
   - ChemicalSystem -> qcel.models.Molecule

   While not supported at the moment, similar conversions for the AO basis
   set are possible.

   Because of the difference in philosophy between QCEngine and NWChemEx,
   there are some inputs which can not easily be mapped automatically, for
   example the electronic structure method (in NWChemEx methods correspond
   to module instances, whereas QCEngine requires strings). It is the
   responsibility of the module wrapping the call to ``call_qcengine`` to
   pass these additional inputs in as kwargs that can be forwarded to a
   QCElemental.models.AtomicInput object via the ``model`` keyword.

   :param pt: The property type we are computing.
   :type pt: pluginplay.PropertyType
   :param mol: The molecular system we are computing the properties of.
   :type mol: chemist.ChemicalSystem
   :param program: Which electronic structure package is being used as the
                   backend?
   :type program: str
   :param kwargs: Key-value pairs which will be forwarded to QCElemental's
                  ``AtomicInput`` class via the ``model`` key.

   :return: The requested property.
   :rtype: Varies depending on the requested property


.. py:class:: NWChemViaMolSSI


   Bases: :py:obj:`pluginplay.ModuleBase`

   .. py:method:: run_(inputs, submods)



.. py:function:: load_nwchem_modules(mm)


