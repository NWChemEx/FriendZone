friendzone.nwx2qcengine
=======================

.. py:module:: friendzone.nwx2qcengine


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/friendzone/nwx2qcengine/call_qcengine/index


Classes
-------

.. autoapisummary::

   friendzone.nwx2qcengine.QCEngineGradient


Functions
---------

.. autoapisummary::

   friendzone.nwx2qcengine._run_impl
   friendzone.nwx2qcengine.load_qcengine_modules


Package Contents
----------------

.. py:function:: _run_impl(driver, inputs, rv, runtime)

   Our strategy here is to use the fact that the inputs to the TotalEnergy
   PT are a subset of those to other PTs


.. py:class:: QCEngineGradient

   Bases: :py:obj:`QCEngineEnergy`


   Driver module for computing gradients with QCEngine.

   This class extends QCEngineEnergy (QCEngine always computes the energy
   when computing the gradient thus this module will also compute the
   energy). Relative to QCEngineEnergy the main differences are:

   - Addition of gradient property type
   - Invocation of _run_impl with 'gradient' instead of 'energy'


   .. py:method:: run_(inputs, submods)


.. py:function:: load_qcengine_modules(mm)

   Loads the collection of modules that wrap QCElemental calls.

   Currently, the friends exported by this function are:

   #. NWChem

   the levels of theory are:

   #. SCF
   #. B3LYP
   #. MP2
   #. CCSD
   #. CCSD(T)

   and we have 0-th and 1-st derivatives.

   The final set of modules is the Cartesian product of all of the above.

   :param mm: The ModuleManager that the NWChem Modules will be loaded into.
   :type mm: pluginplay.ModuleManager


